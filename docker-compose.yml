version: "3.8"

services:
  # Configuration for the Apache container running the Q2A site
  php-apache-environment:
    container_name: q2a-apache              # Custom name for the q2a Apache server
    build:                                  # Build a new image
      context: ./q2a_site                   # Source of the container
      dockerfile: Dockerfile                # Dockerfile to build from
    image: q2a-php-apache                   # Name of the image of the Apache server being created
    restart: on-failure                     # Restart this container if a failure occurs
    depends_on:                             # Ensure this container starts *after* the DB container is running
      - "db"                                # Must be the name of the database *container*
    volumes:                                # Bind the source directory to the website container
      - type: bind                          # Bind instead of Volume because we want to be able to make changes to the source folder without re-composing the container
        source: ./q2a_site                  # Must be the directory containing `index.php`
        target: /var/www/html/              # Default root for Apache web server
    ports:                                  # Define what ports should be open for traffic
      - "80:80"                             # Open 80 on the host to allow HTTP traffic
      - "443:443"                           # Open 443 on the host to allow HTTPS traffic

  # Configuration for the Q2A database container
  db:
    container_name: q2a-db                  # Note that this is used for the `QA_MYSQL_HOSTNAME` env var in `qa-config.php` in the Q2A container
    image: mysql                            # Using a mySQL database
    restart: always                         # Always restart the container. See `https://www.cloudbees.com/blog/ensuring-containers-are-always-running-with-dockers-restart-policy` for more restart policies
    environment:                            # Setting the mySQL environment variables
      # Not set in `qa-config.php`
      MYSQL_ROOT_PASSWORD: ROOT_PASSWORD_TO_REPLACE
      # Name of the *database*, not the container
      MYSQL_DATABASE: DATABASE_TO_REPLACE
      # Username used in `qa-config.php`
      MYSQL_USER: USERNAME_TO_REPLACE
      # Password used in `qa-config.php`
      MYSQL_PASSWORD: PASSWORD_TO_REPLACE
    ports:                                  # This allows us to access the MySQL database remotely (Remove after ETL)
      - "9906:3306"                         # 3306 is default for SQL
    volumes:                                # Volume for data persistence
      - type: volume                        # Use a Volume over a Bind to make managing data easier
        source: q2a_db_volume               # This voluem is located on the HOST MACHINE
        target: /var/lib/mysql              # Location of the MySQL database

  # Configuration for phpMyAdmin database management container
  phpmyadmin:
    container_name: q2a-phpmyadmin          # Naming this container isn't super useful
    image: phpmyadmin                       # https://hub.docker.com/_/phpmyadmin
    links:                                  # Link this service to our DB
      - db
    restart: always                         # Like the DB, ensure this always restarts
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
    ports:                                  # Allows us to access MySQL database remotely
      - "3306:443"                          # Port 3306 will access phpMyAdmin via HTTPS

  # Configuration for Portainer container management system
  portainer:
    container_name: q2a-portainer           # Again, not super useful, but consistent!
    image: portainer/portainer-ce           # Note this is the free community edition
    restart: always                         # No crashy :)
    volumes:                                # Portainer needs to access the docker socket to modify containers
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
      - /local_certs:/certs                 # Allow Portainer SSL certs
    ports:
      - "9443:9443"                         # HTTPS access
      #- "9000:9000"                         # HTTP access (Legacy; not recommended!)
    command:                                # Pass these into portainer for SSL access
      --sslcert /certs/portainer.crt
      --sslkey /certs/portainer.key

volumes:                                    # These volumes are stored on /var/lib/docker/volumes/ (on Linux)
  q2a_db_volume:                            # Persistent storage for DB
  portainer_data:                           # For Portainer usage